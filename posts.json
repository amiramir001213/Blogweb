[
  {
    "id": "post-1",
    "banner": "xss_image/httponly.png",
    "title": "HttpOnly: افزایش امنیت کوکی‌ها در مقابل حملات XSS",
    "date": "۷ اردیبهشت ۱۴۰۴",
    "author": "ادمین",
    "excerpt": "در این مقاله نحوه استفاده از پرچم HttpOnly برای محافظت از کوکی‌های حساس در برابر حملات Cross-Site Scripting (XSS) را بررسی می‌کنیم.",
    "content": "<h2 class=\"article-header\">مقدمه</h2>\n<p>حملات <mark>Cross-Site Scripting</mark> یا <mark>XSS</mark> اجازه می‌دهد مهاجم با تزریق کد مخرب <mark>JavaScript</mark> در صفحه، به کوکی‌های کاربر دسترسی پیدا کند. با استفاده از پرچم <mark>HttpOnly</mark> می‌توان دسترسی JavaScript به کوکی‌ها را مسدود کرد و ریسک سرقت آن‌ها را کاهش داد.</p>\n<h2>HttpOnly چیست؟</h2>\n<p>بر اساس استاندارد <a href=\"https://tools.ietf.org/html/rfc6265\" target=\"_blank\">RFC 6265</a>، <mark>HttpOnly</mark> یک ویژگی است که هنگام ارسال کوکی تعیین می‌کند مرورگر فقط از طریق هدر <mark>HTTP(S)</mark> به آن دسترسی داشته باشد و اسکریپت‌های سمت کلاینت نتوانند آن را بخوانند.</p>\n<p>نمونه‌ای از ست کردن کوکی با HttpOnly:</p>\n<pre><code>Set-Cookie: sessionid=abc123; HttpOnly; Secure</code></pre>\n<h2>نحوه پیاده‌سازی</h2>\n<p>در PHP:</p>\n<pre><code>setcookie('session_id', $sessionId, [\n  'expires'  => time() + 86400,\n  'path'     => '/',\n  'domain'   => 'example.com',\n  'secure'   => true,\n  'httponly' => true,    // فعال‌سازی HttpOnly\n  'samesite' => 'Strict' // کاهش ریسک CSRF\n]);</code></pre>\n<p>در Node.js (Express):</p>\n<pre><code>res.cookie('session_id', sessionId, {\n  maxAge: 86400000,\n  httpOnly: true,  // فعال‌سازی HttpOnly\n  secure: true,\n  sameSite: 'strict'\n});</code></pre>\n<h2>مزایا و محدودیت‌ها</h2>\n<ul>\n  <li>جلوگیری از دسترسی <mark>JavaScript</mark> به کوکی‌های احراز هویت و کاهش سرقت آن‌ها در حملات <mark>XSS</mark>.</li>\n  <li>در صورت استفاده همراه با <code>Secure</code>، مقاوم‌تر در برابر حملات <mark>Man-in-the-Middle</mark> می‌شود.</li>\n  <li>HttpOnly تنها یک لایه دفاعی است؛ برای مقابله جامع با XSS باید از <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\" target=\"_blank\">CSP</a> و پاکسازی ورودی‌ها نیز استفاده کرد.</li>\n</ul>\n<h2>نتیجه‌گیری</h2>\n<p><mark>HttpOnly</mark> یک راهکار ساده و مؤثر برای کاهش خطر سرقت کوکی‌ها در حملات <mark>XSS</mark> است، اما باید همراه با روش‌های دیگر مانند <mark>CSP</mark>، <mark>Input Validation</mark> و <mark>SameSite</mark> به‌کار رود تا زنجیره امنیتی شما قوی باقی بماند.</p>\n<h2>منابع</h2>\n<ol>\n  <li>[<a href=\"https://owasp.org/www-community/HttpOnly\" target=\"_blank\">OWASP HttpOnly</a>]</li>\n  <li>[<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\" target=\"_blank\">MDN Web Docs: Using HTTP cookies</a>]</li>\n  <li>[<a href=\"https://tools.ietf.org/html/rfc6265\" target=\"_blank\">RFC 6265: HTTP State Management Mechanism</a>]</li>\n  <li>[<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\" target=\"_blank\">MDN Web Docs: Content Security Policy (CSP)</a>]</li>\n</ol>",
    "share_platforms": [
      {
        "name": "واتساپ",
        "icon": "whatsapp",
        "url": "https://wa.me/?text={url}"
      },
      {
        "name": "تلگرام",
        "icon": "telegram",
        "url": "https://t.me/share/url?url={url}"
      },
      {
        "name": "ایکس",
        "icon": "x",
        "url": "https://twitter.com/intent/tweet?url={url}"
      },
      {
        "name": "لینکدین",
        "icon": "linkedin",
        "url": "https://www.linkedin.com/sharing/share-offsite/?url={url}"
      },
      {
        "name": "فیسبوک",
        "icon": "facebook",
        "url": "https://www.facebook.com/sharer/sharer.php?u={url}"
      }
    ],
    "tags": [
      "امنیت وب",
      "HttpOnly",
      "XSS",
      "کوکی",
      "OWASP"
    ],
    "sources": [
      {
        "title": "OWASP HttpOnly",
        "url": "https://owasp.org/www-community/HttpOnly"
      },
      {
        "title": "MDN Web Docs: Using HTTP cookies",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"
      },
      {
        "title": "RFC 6265: HTTP State Management Mechanism",
        "url": "https://tools.ietf.org/html/rfc6265"
      },
      {
        "title": "MDN Web Docs: Content Security Policy (CSP)",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy"
      }
    ]
  },
  {
    "id": "post-2",
    "banner": "CSRF_image/CSRF.png",
    "title": "جلوگیری از حملات CSRF با استفاده از توکن‌های امن",
    "date": "۷ اردیبهشت ۱۴۰۴",
    "author": "ادمین",
    "excerpt": "در این مقاله روش‌های مؤثر مقابله با حملات Cross-Site Request Forgery (CSRF) را با توکن‌های یک‌بارمصرف بررسی می‌کنیم.",
    "content": "<h2 class=\"article-header\">مقدمه</h2>\n<p>حملات <mark>Cross-Site Request Forgery</mark> یا <mark>CSRF</mark> از این واقعیت سوء استفاده می‌کنند که مرورگرها کوکی‌های احراز هویت را با هر درخواست به دامنه مربوطه می‌فرستند. مهاجم می‌تواند کاربر را وادار به ارسال درخواست‌های مخرب کند که به‌صورت مشروع از طرف او اجرا می‌شوند. با استفاده از توکن‌های <mark>CSRF</mark> می‌توان از این حملات جلوگیری کرد.</p>\n<h2>توکن CSRF چگونه کار می‌کند؟</h2>\n<ol>\n  <li>سرور برای هر جلسه‌ی کاربر یک توکن تصادفی و منحصر به فرد می‌سازد.</li>\n  <li>توکن در فرم‌ها به‌صورت فیلد مخفی قرار می‌گیرد.</li>\n  <li>سرور هنگام دریافت درخواست، توکن ارسال شده را با مقدار ذخیره‌شده مقایسه می‌کند.</li>\n  <li>در صورت ناسازگاری، درخواست رد می‌شود.</li>\n</ol>\n<h2>پیاده‌سازی در PHP</h2>\n<pre><code>function generateCsrfToken() {\n  if (empty($_SESSION['csrf_token'])) {\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n  }\n  return $_SESSION['csrf_token'];\n}\n\nfunction verifyCsrfToken($token) {\n  return isset($_SESSION['csrf_token']) &&\n         hash_equals($_SESSION['csrf_token'], $token);\n}</code></pre>\n<h2>پیاده‌سازی در Node.js/Express</h2>\n<pre><code>const csrf = require('csurf');\nconst cookieParser = require('cookie-parser');\napp.use(cookieParser());\nconst csrfProtection = csrf({ cookie: true });\n\napp.get('/form', csrfProtection, (req, res) => {\n  res.render('form', { csrfToken: req.csrfToken() });\n});\n\napp.post('/process', csrfProtection, (req, res) => {\n  res.send('فرم با موفقیت پردازش شد');\n});</code></pre>\n<h2>روش‌های تکمیلی</h2>\n<ul>\n  <li><strong>SameSite Cookies</strong>: با <code>SameSite=Strict</code> ارسال کوکی‌ها در درخواست‌های cross-site را مسدود می‌کند.</li>\n  <li><strong>هدر Referer</strong>: بررسی معتبر بودن منبع درخواست.</li>\n  <li><strong>هدرهای سفارشی AJAX</strong>: ارسال توکن CSRF در هدرهای سفارشی با JavaScript.</li>\n</ul>\n<h2>نتیجه‌گیری</h2>\n<p>پیاده‌سازی توکن‌های یک‌بارمصرف و روش‌های تکمیلی می‌تواند به‌طور چشمگیری از حملات <mark>CSRF</mark> جلوگیری کند. امنیت وب نیازمند چند لایه دفاعی است و <mark>CSRF</mark> تنها یکی از آن‌هاست.</p>\n<h2>منابع</h2>\n<ol>\n  <li>[<a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html\" target=\"_blank\">OWASP CSRF Prevention Cheat Sheet</a>]</li>\n  <li>[<a href=\"https://portswigger.net/web-security/csrf\" target=\"_blank\">PortSwigger: Cross-site request forgery</a>]</li>\n  <li>[<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\" target=\"_blank\">MDN Web Docs: Using HTTP cookies</a>]</li>\n</ol>",
    "tags": [
      "امنیت وب",
      "CSRF",
      "توکن امنیتی",
      "OWASP"
    ],
    "sources": [
      {
        "title": "OWASP CSRF Prevention Cheat Sheet",
        "url": "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
      },
      {
        "title": "PortSwigger: Cross-site request forgery",
        "url": "https://portswigger.net/web-security/csrf"
      },
      {
        "title": "MDN Web Docs: Using HTTP cookies",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"
      }
    ]
  },
  {
    "id": "post-3",
    "banner": "images/API.png",
    "title": "امنیت API: بهترین شیوه‌ها برای محافظت از رابط‌های برنامه‌نویسی",
    "date": "۷ اردیبهشت ۱۴۰۴",
    "author": "ادمین",
    "excerpt": "در این مقاله بهترین روش‌های ایمن‌سازی APIها را بر اساس استانداردهای OWASP و تجربیات عملی بررسی می‌کنیم.",
    "content": "<h2 class=\"article-header\">مقدمه</h2>\n<p><mark>API</mark>ها در معماری‌های مدرن گزینه‌ای کلیدی برای ارتباط بین سرویس‌ها هستند، اما در صورت ایمن نبودن می‌توانند به نقطه ضعف بزرگی تبدیل شوند. رعایت اصول <mark>امنیت API</mark> برای محافظت از داده‌ها و سیستم‌ها در برابر حملات مختلف ضروری است. در این مقاله بهترین روش‌های ایمن‌سازی APIها را بررسی می‌کنیم.</p>\n<h2>۱. احراز هویت و مجوزدهی قوی</h2>\n<ul>\n  <li><strong>OAuth 2.0 & OpenID Connect</strong>: استانداردهای مبتنی بر توکن برای احراز هویت و مجوزدهی.</li>\n  <li><strong>JWT (JSON Web Tokens)</strong>: انتقال امن ادعاها بین سرویس‌ها.</li>\n  <li><strong>API Keys</strong>: کلیدهای اختصاصی برای کنترل دسترسی.</li>\n  <li><strong>MFA</strong>: لایه اضافی احراز هویت برای APIهای حساس.</li>\n</ul>\n<h2>۲. محدودیت نرخ و سهمیه‌بندی</h2>\n<p>اجرای rate limiting و quota می‌تواند حملات DDoS و سوءاستفاده را کاهش دهد:</p>\n<pre><code>const rateLimit = require('express-rate-limit');\nconst apiLimiter = rateLimit({ windowMs: 15*60*1000, max: 100 });\napp.use('/api/', apiLimiter);</code></pre>\n<p>این روش از <em>REST Security Cheat Sheet</em> الهام گرفته شده است.</p>\n<h2>۳. ارتباط امن با HTTPS</h2>\n<p>همیشه از HTTPS استفاده کنید تا داده‌ها در حین انتقال رمزنگاری شوند و از حملات Man-in-the-Middle جلوگیری شود.</p>\n<h2>۴. اعتبارسنجی و پاکسازی ورودی‌ها</h2>\n<ul>\n  <li>برای جلوگیری از SQL Injection از Prepared Statements یا ORMها استفاده کنید.</li>\n  <li>برای مقابله با XSS خروجی‌گذاری صحیح و استفاده از CSP ضروری است.</li>\n</ul>\n<h2>۵. مدیریت خطا و لاگینگ امن</h2>\n<p>از افشای اطلاعات حساس در پیام‌های خطا اجتناب کنید و فقط جزئیات لازم را در لاگ‌های سرور ثبت کنید.</p>\n<h2>۶. نظارت و پاسخ به حوادث</h2>\n<p>سیستم‌های تشخیص نفوذ پیاده کنید و برنامه واکنش به حوادث را به‌طور منظم تمرین کنید.</p>\n<h2>نتیجه‌گیری</h2>\n<p>امنیت <mark>API</mark> فرآیندی مداوم است. با اجرای این بهترین شیوه‌ها و به‌روزرسانی مستمر، می‌توانید ریسک نفوذ به <mark>API</mark>های خود را به‌طور چشمگیری کاهش دهید.</p>\n<h2>منابع</h2>\n<ol>\n  <li>[<a href=\"https://owasp.org/www-project-api-security/\" target=\"_blank\">OWASP API Security Project</a>]</li>\n  <li>[<a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\" target=\"_blank\">OWASP REST Security Cheat Sheet</a>]</li>\n  <li>[<a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\" target=\"_blank\">OWASP SQL Injection Prevention Cheat Sheet</a>]</li>\n  <li>[<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/SQL_Injection\" target=\"_blank\">MDN Glossary: SQL Injection</a>]</li>\n  <li>[<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting\" target=\"_blank\">MDN Glossary: Cross-site scripting (XSS)</a>]</li>\n  <li>[<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\" target=\"_blank\">MDN Web Docs: Content Security Policy (CSP)</a>]</li>\n</ol>",
    "tags": [
      "امنیت وب",
      "API",
      "JWT",
      "OAuth",
      "OWASP"
    ],
    "sources": [
      {
        "title": "OWASP API Security Project",
        "url": "https://owasp.org/www-project-api-security/"
      },
      {
        "title": "OWASP REST Security Cheat Sheet",
        "url": "https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"
      },
      {
        "title": "OWASP SQL Injection Prevention Cheat Sheet",
        "url": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
      },
      {
        "title": "MDN Glossary: SQL Injection",
        "url": "https://developer.mozilla.org/en-US/docs/Glossary/SQL_Injection"
      },
      {
        "title": "MDN Glossary: Cross-site scripting (XSS)",
        "url": "https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting"
      },
      {
        "title": "MDN Web Docs: Content Security Policy (CSP)",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy"
      }
    ]
  }
]