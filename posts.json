[
    {
        "id": "post-1",
        "title": "درباره‌ی HttpOnly و نقش آن در جلوگیری از حملات XSS",
        "date": "7 اردیبهشت ۱۴۰۴",
        "author": "ادمین",
        "excerpt": "HttpOnly یک ویژگی امنیتی برای کوکی‌هاست که باعث می‌شود این کوکی‌ها فقط از طریق پروتکل HTTP یا HTTPS قابل دسترسی باشند و اسکریپت‌های سمت کلاینت (مثل JavaScript) نتوانند آن‌ها را بخوانند یا تغییر دهند.",
        "image": "xss_image/xss_sample.jpg",
        "content": "<h2>درباره‌ی HttpOnly و نقش آن در جلوگیری از حملات XSS</h2><p>HttpOnly یک ویژگی امنیتی برای کوکی‌هاست که باعث می‌شود این کوکی‌ها فقط از طریق پروتکل HTTP یا HTTPS قابل دسترسی باشند و اسکریپت‌های سمت کلاینت (مثل <code>JavaScript</code>) نتوانند آن‌ها را بخوانند یا تغییر دهند.</p><figure><img src=\"xss_image/xss_sample.jpg\" alt=\"تصویر نمونه برای حمله XSS\" /><figcaption>نمونه‌ای از یک حمله XSS</figcaption></figure><p>زمانی که یک کوکی با ویژگی HttpOnly ست می‌شود، حتی اگر مهاجمی موفق به اجرای کد مخرب (XSS) در مرورگر کاربر شود، دیگر نمی‌تواند با دستورات جاوااسکریپتی مانند <code>document.cookie</code> به محتوای این کوکی دسترسی پیدا کند.</p><h3>نمونه‌ای از ست کردن کوکی با HttpOnly</h3><pre>Set-Cookie: sessionid=abc123; HttpOnly; Secure</pre><p>در این مثال:</p><ul><li><code>HttpOnly</code>: مانع دسترسی جاوااسکریپت به کوکی می‌شود.</li><li><code>Secure</code>: ارسال کوکی را به ارتباط‌های امن (HTTPS) محدود می‌کند.</li></ul><h3>اهمیت HttpOnly در حملات XSS</h3><p>در حملات XSS، هدف اصلی مهاجم معمولاً اجرای کد در مرورگر کاربر برای سرقت اطلاعات حساس مانند <code>Session Token</code> است.</p><p>با فعال کردن HttpOnly روی کوکی‌های حساس:</p><ul><li>سرقت کوکی توسط اسکریپت‌ها غیرممکن می‌شود.</li><li>اما همچنان ممکن است مهاجم از XSS برای تغییر ظاهر صفحه یا ارسال درخواست‌های مخرب استفاده کند.</li></ul><h3>نکته‌ی مهم:</h3><p>HttpOnly فقط از سرقت کوکی جلوگیری می‌کند؛ به‌تنهایی نمی‌تواند جلوی اجرای حملات XSS را بگیرد.</p><p>بنابراین لازم است همراه با روش‌های امنیتی دیگر استفاده شود، مانند:</p><ul><li>فیلتر و پاکسازی ورودی‌ها (<code>Input Validation/Sanitization</code>)</li><li>اعمال سیاست‌های امنیتی محتوا (<code>Content Security Policy - CSP</code>)</li><li>محدودسازی دسترسی‌ها (<code>Access Control</code>)</li></ul><h3>خلاصه و نتیجه‌گیری:</h3><ul><li>همیشه کوکی‌های حساس (مثل <code>Session ID</code>) را با ویژگی HttpOnly ست کنید.</li><li>به HttpOnly به‌عنوان یک سپر دفاعی در برابر سرقت کوکی نگاه کنید، نه راهکاری کامل برای مقابله با XSS.</li><li>برای محافظت کامل، باید از لایه‌های مختلف امنیتی به‌طور همزمان استفاده کنید.</li></ul>"
    },
    {
        "id": "post-2",
        "title": "امنیت وب: چالش‌های رایج در توسعه وب",
        "date": "7 اردیبهشت ۱۴۰۴",
        "author": "شما",
        "excerpt": "بررسی چالش‌های رایج امنیت وب و راه‌های مقابله بر اساس منابع OWASP، MDN و Cloudflare…",
        "content": "<h2>امنیت وب: چالش‌های رایج در توسعه وب</h2>\n<p>افزایش روزافزون حملات سایبری اهمیت امنیت در توسعه وب را بیش از پیش نشان می‌دهد. در این مقاله با پنج چالش اصلی و روش‌های مقابله با آن‌ها آشنا می‌شویم.</p>\n\n<h3>۱. تزریق SQL (SQL Injection)</h3>\n<p>تزریق SQL زمانی رخ می‌دهد که مهاجم با ارسال داده‌های ساختگی، دستورات مخرب SQL را اجرا می‌کند و به پایگاه داده دسترسی می‌یابد [1].</p>\n<p><strong>راهکارها:</strong> استفاده از Prepared Statements و پارامترایز کردن کوئری‌ها [2]، ارزیابی و پاک‌سازی ورودی‌ها (Input Validation) [2] و اعمال اصل حداقل دسترسی در حساب‌های پایگاه داده.</p>\n\n<h3>۲. اسکریپت‌نویسی بین‌سایتی (XSS)</h3>\n<p>XSS با تزریق کد جاوااسکریپت مخرب امکان سرقت کوکی یا تغییر محتوای صفحه را می‌دهد [3].</p>\n<p><strong>راهکارها:</strong> خروجی‌گذاری ایمن (Output Encoding) [3]، استفاده از سیاست امنیت محتوا (CSP) [4] و تنظیم کوکی‌های HttpOnly و SameSite.</p>\n\n<h3>۳. جعل درخواست بین‌سایتی (CSRF)</h3>\n<p>در CSRF، مهاجم کاربر را وادار به ارسال درخواست‌های مخرب می‌کند [5].</p>\n<p><strong>راهکارها:</strong> استفاده از توکن‌های ضد-CSRF (Synchronizer Token Pattern) [5] و انتقال توکن CSRF در هدرهای امن.</p>\n\n<h3>۴. فیشینگ (Phishing)</h3>\n<p>فیشینگ تلاش برای فریب کاربران جهت افشای اطلاعات حساس مانند گذرواژه و جزئیات کارت اعتباری است [6].</p>\n<p><strong>راهکارها:</strong> استفاده از احراز هویت چندعاملی (MFA)، آموزش کاربران و به‌کارگیری فیلترهای پیشرفته ایمیل.</p>\n\n<h3>۵. حملات انکار سرویس توزیع‌شده (DDoS)</h3>\n<p>DDoS با ارسال حجم زیاد ترافیک سرویس را غیرفعال می‌کند [7].</p>\n<p><strong>راهکارها:</strong> استفاده از CDN و محدودسازی نرخ درخواست‌ها، مانیتورینگ ترافیک و سرویس‌های کاهش‌دهنده DDoS [7].</p>\n\n<h3>منابع</h3>\n<ul>\n  <li>[1] <a href='https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html' target='_blank'>OWASP SQL Injection Prevention Cheat Sheet</a></li>\n  <li>[2] <a href='https://developer.mozilla.org/en-US/docs/Web/Security/SQL_Injection' target='_blank'>MDN Web Docs: SQL Injection</a></li>\n  <li>[3] <a href='https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting' target='_blank'>MDN Web Docs: Cross-site scripting (XSS)</a></li>\n  <li>[4] <a href='https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP' target='_blank'>MDN Web Docs: Content Security Policy (CSP)</a></li>\n  <li>[5] <a href='https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html' target='_blank'>OWASP CSRF Prevention Cheat Sheet</a></li>\n  <li>[6] <a href='https://www.cloudflare.com/learning/security/what-is-phishing/' target='_blank'>Cloudflare: What is Phishing?</a></li>\n  <li>[7] <a href='https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/' target='_blank'>Cloudflare: What is a DDoS Attack?</a></li>\n</ul>"
    },
    {
        "id": "post-3",
        "title": "آشنایی با OWASP Top 10",
        "date": "7 اردیبهشت ۱۴۰۴",
        "author": "ادمین",
        "excerpt": "معرفی ده آسیب‌پذیری اصلی امنیت وب براساس OWASP Top 10 ۲۰۲۱ و روش‌های مقابله…",
        "content": "<h2>آشنایی با OWASP Top 10</h2>\n<p>OWASP Top 10 مرجعی است برای شناخت ۱۰ آسیب‌پذیری اصلی وب که هر چند سال یک‌بار بازنگری می‌شود. نسخه ۲۰۲۱ براساس تحلیل داده‌های بیش از ۴۰ سازمان منتشر شده است [1].</p>\n\n<h3>لیست OWASP Top 10 سال ۲۰۲۱</h3>\n<ol>\n  <li><strong>A01: Broken Access Control</strong> – نقص در کنترل دسترسی که منجر به دسترسی غیرمجاز می‌شود.</li>\n  <li><strong>A02: Cryptographic Failures</strong> – رمزنگاری ناصحیح یا غیاب رمزنگاری داده‌های حساس.</li>\n  <li><strong>A03: Injection</strong> – شامل SQLi، XSS و موارد مشابه.</li>\n  <li><strong>A04: Insecure Design</strong> – کمبود طراحی امن در فازهای اولیه توسعه.</li>\n  <li><strong>A05: Security Misconfiguration</strong> – پیکربندی نادرست سرورها و نرم‌افزارها.</li>\n  <li><strong>A06: Vulnerable and Outdated Components</strong> – استفاده از اجزای منسوخ و آسیب‌پذیر.</li>\n  <li><strong>A07: Identification and Authentication Failures</strong> – نقص در احراز هویت کاربران.</li>\n  <li><strong>A08: Software and Data Integrity Failures</strong> – نبود بررسی صحت در به‌روزرسانی‌ها و داده‌ها.</li>\n  <li><strong>A09: Security Logging and Monitoring Failures</strong> – ضعف در لاگ‌گیری و پایش اتفاقات امنیتی.</li>\n  <li><strong>A10: Server-Side Request Forgery (SSRF)</strong> – جعل درخواست سمت سرور برای دسترسی به منابع محافظت‌شده.</li>\n</ol>\n\n<h3>چگونه استفاده کنیم؟</h3>\n<p>برای کاهش ریسک، متدولوژی Secure SDLC، بهره‌گیری از ابزارهای تست امنیتی خودکار و آموزش مستمر توسعه‌دهندگان توصیه می‌شود [2].</p>\n\n<h3>منابع</h3>\n<ul>\n  <li>[1] <a href='https://owasp.org/Top10/?2021' target='_blank'>OWASP Top 10 – 2021</a></li>\n  <li>[2] <a href='https://cheatsheetseries.owasp.org/cheatsheets/Secure_Development_Lifecycle_Cheat_Sheet.html' target='_blank'>OWASP Secure Development Lifecycle Cheat Sheet</a></li>\n</ul>"
    }
]
